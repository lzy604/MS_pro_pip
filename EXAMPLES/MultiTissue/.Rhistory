pca_df = as.data.frame(pca$x)
pca_df$Condition=gsub('_[1-9]*$','',rownames(pca_df))
out$components <- pca_df
return(out)
}
pca <- get_PCs(dat)
PCA=pca
PCA$summary$percent[1]
plot_PCs <- function(PCA, output_dir, output_filename) {
p=ggplot(PCA$components, aes(x = PC1, y = PC2, color = Condition)) +
geom_point(size=4)+
xlab(paste0("PC1","(",PCA$summary$percent[1],"%)")) +
ylab(paste0("PC2","(",PCA$summary$percent[2],"%)"))+
theme_classic()
ggsave(p,filename=paste0(output_dir, output_filename), height = 7,width = 9)
}
plot_PCs(pca, cluster_dir, 'PCA.pdf')
cluster_dir="Downloads/"
plot_PCs(pca, cluster_dir, 'PCA.pdf')
install.packages(ggdendrogram)
install.packages('ggdendrogram')
plot_hierarchical_cluster <- function(DT, output_dir) {
cluster_data=DT[,-c(1:3)]
cluster_data[is.na(cluster_data)]=0
cluster_data=cluster_data[which(rowSums(cluster_data)>0),]
log2_cluster_data=log2(cluster_data+1)
dist_mat <- dist(t(log2_cluster_data)) #
hc_cluster <- hclust(dist_mat,method = "complete")
samplesname<- colnames(log2_cluster_data)
g <- ggdendrogram(hc, rotate=TRUE) + labs(title='Hierarchical clustering')
cat(paste0('   -> ', output_dir, '\n'))
ggsave(g, filename=paste0(output_dir, 'hc_cluster_log2.pdf'))
}
plot_hierarchical_cluster(dat, cluster_dir)
library('ggdendrogram')
install.packages('ggdendrogram')
install.packages("ggdendro")
library(ggdendro)
plot_hierarchical_cluster(dat, cluster_dir)
plot_hierarchical_cluster <- function(DT, output_dir) {
cluster_data=DT[,-c(1:3)]
cluster_data[is.na(cluster_data)]=0
cluster_data=cluster_data[which(rowSums(cluster_data)>0),]
log2_cluster_data=log2(cluster_data+1)
dist_mat <- dist(t(log2_cluster_data)) #
hc_cluster <- hclust(dist_mat,method = "complete")
g <- ggdendrogram(hc_cluster, rotate=TRUE) + labs(title='Hierarchical clustering')
cat(paste0('   -> ', output_dir, '\n'))
ggsave(g, filename=paste0(output_dir, 'hc_cluster_log2.pdf'))
}
plot_hierarchical_cluster(dat, cluster_dir)
plot_hierarchical_cluster(dat, cluster_dir)
library(magick)
install.packages("magick")
install.packages("foreach")
library(c('ggplot2', 'data.table', 'corrplot', 'umap', 'magick', 'ggdendro', 'ecodist',
'ggbeeswarm', 'ggrepel', 'ggthemes', 'foreach','reshape2'))
packages=c('ggplot2', 'data.table', 'corrplot', 'umap', 'magick', 'ggdendro', 'ecodist',
'ggbeeswarm', 'ggrepel', 'ggthemes', 'foreach','reshape2')
for (i in packages) {
library(i)
}
i
library(i)
library(ggplot2)
library(data.table)
library(corrplot)
library(umap)
library(magick)
library(ggdendro)
library(ecodist)
install.packages(ecodist)
install.packages('ecodist')
library(ecodist)
library(ggbeeswarm)
library(ggrepel)
library(ggthemes)
install.packages('ggthemes')
library(ggthemes)
library(foreach)
library(reshape2)
dat=fread("Documents/pro_pip/cw_protpip/ProtPipe_de/report.pg_matrix.tsv")
dat <- standardize_format(dat)
setnames(dat, trim_colnames(dat))
source('Documents/pro_pip/R/functions.R')
dat=fread("Documents/pro_pip/cw_protpip/ProtPipe_de/report.pg_matrix.tsv")
dat <- standardize_format(dat)
setnames(dat, trim_colnames(dat))
dat.long <- melt_intensity_table(dat)
dat.long <- dat.long[, Intensity := log((Intensity + 1), base=opt$log_base)]
View(dat)
original_colorder <- colnames(dat)
dat <- dcast(dat.long, Protein_Group+Genes+First_Protein_Description~Sample, value.var='Intensity')
View(dat)
setcolorder(dat, original_colorder)
# exclude samples in opt$exclude
if (! is.null(opt$exclude)) {
opt$exclude <- strsplit(opt$exclude, split=';')[[1]]
tryTo(paste('INFO: excluding samples', opt$exclude),{
for(i in opt$exclude) {
dat[, (i) := NULL]
}
}, paste0('ERROR: problem trying to load ', opt$pgfile, ', does it exist?'))
}
tryTo(paste0('INFO: Converting to long format'), {
dat.long <- melt_intensity_table(dat)
}, 'ERROR: failed! Check for missing/corrupt headers?')
tryTo(paste0('INFO: Applying Log[base', opt$log_base, '](value+1) transformation to intensities'),{
dat.long <- dat.long[, Intensity := log((Intensity + 1), base=opt$log_base)]
},'ERROR: failed! Was your log base numeric and > 1?')
#### ARG PARSING ###################################################################################
library(optparse)
option_list = list(
make_option(
"--pgfile",
default=NULL,
help=paste(
'Input file of Protein Group Intensity (from DIA-NN or Spectronaut)',
'Required.',
sep=optparse_indent
)
),
make_option(
"--out",
dest="outdir",
default='output',
help=paste(
'Directory to direct all output. Directory will be created if does not exist).',
'Defaults to the current working directory:',
pwd,
sep=optparse_indent
)
),
make_option(
"--labelgene",
dest="labelgene",
default=NULL,
help='Gene to always label in output plots'
),
make_option(
"--base",
dest="log_base",
default=10,
help='Base for log transformation of intensity data. Default: 10'
),
make_option(
"--normalize",
default='shift',
type='character',
help=paste(
'shift: adjust sample intensities to match global median by adding a constant',
'scale: adjust sample intensities to match global median by multiplicative scaling',
'none: do not normalize',
sep=optparse_indent
)
),
make_option(
"--exclude",
default=NULL,
type='character',
help=paste(
'semicolon-separated string of files to exclude from analysis'
)
),
make_option(
"--sds",
dest = 'sds',
default=3,
type='numeric',
help=paste(
'Filter out samples with protein group counts > N standard deviations from the mean.',
'Increase to higher values for greater tolerance of variance in protein group counts.',
'Default: 3',
sep=optparse_indent
)
),
make_option(
"--minintensity",
dest = 'minintensity',
default=0,
type='numeric',
help='Minimum LINEAR (not log) intensity. Default: 0'
),
make_option(
"--fdr",
dest = 'fdr_threshold',
default=0.05,
type='numeric',
help=paste(
'False Discovery Rate threshold for differential abundance analysis.',
'Default: 0.05',
sep=optparse_indent
)
),
make_option(
"--foldchange",
dest = 'foldchange',
default=5,
type='numeric',
help=paste(
'Minimum LINEAR fold change [NOT log, as log base can be modified] for labeling',
'protein groups in differential abundance analysis. Default: 5 (equivalent to',
'log10 fold-change threshold of 0.699)',
sep=optparse_indent
)
),
make_option(
"--imputation",
action = 'store_true',
default=FALSE,
type='logical',
help=paste(
'Applies data imputation. Not yet implimented.',
sep=optparse_indent
)
),
make_option(
"--design",
default=NULL,
help=paste(
'Comma- or tab-delimited, three-column text file specifying the experimental design.',
'File should contain headers. Header names do not matter; column order DOES matter.',
'Columns order: <sample_name> <condition> <control>',
sep=optparse_indent
)
),
make_option(
"--neighbors",
default=15,
type='numeric',
help=paste(
'N Neighbors to use for UMAP. Default: 15',
sep=optparse_indent
)
),
make_option(
"--dry",
action = 'store_true',
default=FALSE,
type='logical',
help=paste(
'Applies data imputation. Not yet implimented.',
sep=optparse_indent
)
)
)
#### ARG PARSING ###################################################################################
library(optparse)
pwd = getwd()
optparse_indent = '\n                '
option_list = list(
make_option(
"--pgfile",
default=NULL,
help=paste(
'Input file of Protein Group Intensity (from DIA-NN or Spectronaut)',
'Required.',
sep=optparse_indent
)
),
make_option(
"--out",
dest="outdir",
default='output',
help=paste(
'Directory to direct all output. Directory will be created if does not exist).',
'Defaults to the current working directory:',
pwd,
sep=optparse_indent
)
),
make_option(
"--labelgene",
dest="labelgene",
default=NULL,
help='Gene to always label in output plots'
),
make_option(
"--base",
dest="log_base",
default=10,
help='Base for log transformation of intensity data. Default: 10'
),
make_option(
"--normalize",
default='shift',
type='character',
help=paste(
'shift: adjust sample intensities to match global median by adding a constant',
'scale: adjust sample intensities to match global median by multiplicative scaling',
'none: do not normalize',
sep=optparse_indent
)
),
make_option(
"--exclude",
default=NULL,
type='character',
help=paste(
'semicolon-separated string of files to exclude from analysis'
)
),
make_option(
"--sds",
dest = 'sds',
default=3,
type='numeric',
help=paste(
'Filter out samples with protein group counts > N standard deviations from the mean.',
'Increase to higher values for greater tolerance of variance in protein group counts.',
'Default: 3',
sep=optparse_indent
)
),
make_option(
"--minintensity",
dest = 'minintensity',
default=0,
type='numeric',
help='Minimum LINEAR (not log) intensity. Default: 0'
),
make_option(
"--fdr",
dest = 'fdr_threshold',
default=0.05,
type='numeric',
help=paste(
'False Discovery Rate threshold for differential abundance analysis.',
'Default: 0.05',
sep=optparse_indent
)
),
make_option(
"--foldchange",
dest = 'foldchange',
default=5,
type='numeric',
help=paste(
'Minimum LINEAR fold change [NOT log, as log base can be modified] for labeling',
'protein groups in differential abundance analysis. Default: 5 (equivalent to',
'log10 fold-change threshold of 0.699)',
sep=optparse_indent
)
),
make_option(
"--imputation",
action = 'store_true',
default=FALSE,
type='logical',
help=paste(
'Applies data imputation. Not yet implimented.',
sep=optparse_indent
)
),
make_option(
"--design",
default=NULL,
help=paste(
'Comma- or tab-delimited, three-column text file specifying the experimental design.',
'File should contain headers. Header names do not matter; column order DOES matter.',
'Columns order: <sample_name> <condition> <control>',
sep=optparse_indent
)
),
make_option(
"--neighbors",
default=15,
type='numeric',
help=paste(
'N Neighbors to use for UMAP. Default: 15',
sep=optparse_indent
)
),
make_option(
"--dry",
action = 'store_true',
default=FALSE,
type='logical',
help=paste(
'Applies data imputation. Not yet implimented.',
sep=optparse_indent
)
)
)
usage_string <- "Rscript %prog --pgfile [filename] --design [filename] [other options] "
opt <- parse_args(OptionParser(usage = usage_string, option_list))
source('src/functions.R')
dat=fread("Documents/pro_pip/cw_protpip/ProtPipe_de/report.pg_matrix.tsv")
dat <- standardize_format(dat)
setnames(dat, trim_colnames(dat))
opt$exclude <- strsplit(opt$exclude, split=';')[[1]]
tryTo(paste('INFO: excluding samples', opt$exclude),{
for(i in opt$exclude) {
dat[, (i) := NULL]
}
}, paste0('ERROR: problem trying to load ', opt$pgfile, ', does it exist?'))
# exclude samples in opt$exclude
if (! is.null(opt$exclude)) {
opt$exclude <- strsplit(opt$exclude, split=';')[[1]]
tryTo(paste('INFO: excluding samples', opt$exclude),{
for(i in opt$exclude) {
dat[, (i) := NULL]
}
}, paste0('ERROR: problem trying to load ', opt$pgfile, ', does it exist?'))
}
tryTo(paste0('INFO: Converting to long format'), {
dat.long <- melt_intensity_table(dat)
}, 'ERROR: failed! Check for missing/corrupt headers?')
tryTo(paste0('INFO: Applying Log[base', opt$log_base, '](value+1) transformation to intensities'),{
dat.long <- dat.long[, Intensity := log((Intensity + 1), base=opt$log_base)]
},'ERROR: failed! Was your log base numeric and > 1?')
tryTo('INFO: Excluding all unquantified or zero intensities', {
dat.long <- dat.long[! is.na(Intensity)][Intensity != 0]
}, 'ERROR: failed!')
tryTo(paste0('INFO: Applying Filter Log[', opt$log_base, '](Intensity) > ',opt$minintensity),{
dat.long <- dat.long[Intensity > opt$minintensity]
}, 'ERROR: failed!')
tryTo('INFO: Plotting intensity distribution',{
plot_pg_intensities(dat.long, QC_dir, 'intensities.pdf', plot_title='Un-normalized intensities')
# plot_density(dat.long, QC_dir, 'intensity_density.pdf')
# plot_density(dat.long.normalized, QC_dir, 'intensity_density_normalized.pdf')
}, 'ERROR: failed!')
#BiocManager::install("EnsDb.Hsapiens.v79")
library(EnsDb.Hsapiens.v79)
tpm=fread('/Users/liz36/Documents/immune/MSBB/normalized/AMP-AD_MSBB_MSSM_BM_22.normalized.sex_race_age_RIN_PMI_exonicRate_rRnaRate_batch_adj.tsv')
library(data.table)
tpm=fread('/Users/liz36/Documents/immune/MSBB/normalized/AMP-AD_MSBB_MSSM_BM_22.normalized.sex_race_age_RIN_PMI_exonicRate_rRnaRate_batch_adj.tsv')
ensembl=as.data.frame(tpm$`Ensembl ID`)
View(tpm)
View(ensembl)
colnames(ensembl)="ens"
geneIDs1 <- ensembldb::select(EnsDb.Hsapiens.v79, keys=ensembl$ens, keytype = "GENEID", columns = c("SYMBOL","GENEID"))
tpm_gene=merge(geneIDs1,tpm,by.x='GENEID',by.y='Ensembl ID')
View(tpm_gene)
tpm_gene=merge(geneIDs1,tpm,by.x='GENEID',by.y='Ensembl ID',all=T)
write.table(tpm_gene[,2:ncol(tpm_gene)],"/Users/liz36/Documents/immune/MSBB/normalized/AMP-AD_MSBB_MSSM_BM_22.normalized.sex_race_age_RIN_PMI_exonicRate_rRnaRate_batch_adj_gene_sybmbol.txt",sep = "\t",quote = F,row.names = F)
tpm=fread('/Users/liz36/Documents/immune/MSBB/normalized/AMP-AD_MSBB_MSSM_BM_36.normalized.sex_race_age_RIN_PMI_exonicRate_rRnaRate_batch_adj.tsv')
ensembl=as.data.frame(tpm$`Ensembl ID`)
colnames(ensembl)="ens"
geneIDs1 <- ensembldb::select(EnsDb.Hsapiens.v79, keys=ensembl$ens, keytype = "GENEID", columns = c("SYMBOL","GENEID"))
tpm_gene=merge(geneIDs1,tpm,by.x='GENEID',by.y='Ensembl ID',all=T)
write.table(tpm_gene[,2:ncol(tpm_gene)],"/Users/liz36/Documents/immune/MSBB/normalized/AMP-AD_MSBB_MSSM_BM_36.normalized.sex_race_age_RIN_PMI_exonicRate_rRnaRate_batch_adj_gene_sybmbol.txt",sep = "\t",quote = F,row.names = F)
tpm=fread('/Users/liz36/Documents/immune/MSBB/normalized/AMP-AD_MSBB_MSSM_BM_44.normalized.sex_race_age_RIN_PMI_exonicRate_rRnaRate_batch_adj.tsv')
ensembl=as.data.frame(tpm$`Ensembl ID`)
colnames(ensembl)="ens"
geneIDs1 <- ensembldb::select(EnsDb.Hsapiens.v79, keys=ensembl$ens, keytype = "GENEID", columns = c("SYMBOL","GENEID"))
tpm_gene=merge(geneIDs1,tpm,by.x='GENEID',by.y='Ensembl ID',all=T)
write.table(tpm_gene[,2:ncol(tpm_gene)],"/Users/liz36/Documents/immune/MSBB/normalized/AMP-AD_MSBB_MSSM_BM_44.normalized.sex_race_age_RIN_PMI_exonicRate_rRnaRate_batch_adj_gene_sybmbol.txt",sep = "\t",quote = F,row.names = F)
#### ARG PARSING ###################################################################################
package_list = c('ggplot2', 'data.table', 'corrplot', 'umap', 'magick', 'ggdendro', 'ecodist',
'ggbeeswarm', 'ggrepel', 'ggthemes', 'foreach','reshape2','org.Hs.eg.db',
'clusterProfiler','STRINGdb','eulerr','pheatmap')
all((lapply(package_list, require, character.only=TRUE)))
#Working
setwd('/Users/liz36/Documents/pro_pip/cw_protpip/ProtPipe_de/MultiTissue/')
source('/Users/liz36/Documents/GitHub/DIA_MS_pro_pip/src/functions.R')
outdir='AD_Fasta_new/'
##data and design matrix
dat <- fread('Report_AD_add_muscle.csv')
setnames(dat, trim_colnames(dat))
dat.long <- melt_intensity_table(dat)
dat.long <- dat.long[! is.na(Intensity)][Intensity != 0]
##normalization
dat_nor=dat
dat_nor[,3:ncol(dat_nor)]=as.data.frame(apply(dat_nor[,3:ncol(dat_nor)],2,function(x){x*10e4/median(x,na.rm=TRUE)}))
dat.long_nor=melt_intensity_table(dat_nor)
dat.long_nor <- dat.long_nor[! is.na(Intensity)][Intensity != 0]
# PCA
pca <- get_PCs(dat_nor)
pca$components$Condition=gsub("[0-9]+P$","Plasma",pca$components$Condition)
pca$components$Condition=gsub("[0-9]+C$","CSF",pca$components$Condition)
cluster_dir <- paste0(outdir, '/clustering/')
plot_PCs(pca, cluster_dir, 'all_gene_PCA.pdf')
pca$components$Condition=gsub("Brain.*","Brain",pca$components$Condition)
plot_PCs(pca, cluster_dir, 'all_gene_PCA_1.pdf')
pca$components$Condition
pca$components$Condition=gsub("Muscle.*","Muscle",pca$components$Condition)
plot_PCs(pca, cluster_dir, 'all_gene_PCA_1.pdf')
####umap
umap=get_umap(dat_nor,15)
plot_umap(umap, cluster_dir, 'all_gene_umap.pdf')
umap$condition=gsub("[0-9]+P$","Plasma",umap$condition)
umap$condition=gsub("[0-9]+C$","CSF",umap$condition)
plot_umap(umap, cluster_dir, 'all_gene_umap.pdf')
umap$condition=gsub("Brain.*","Brain",umap$condition)
umap$condition=gsub("Muscle.*","Muscle",umap$condition)
plot_umap(umap, cluster_dir, 'all_gene_umap.pdf')
sample_anno <- data.frame(condition = colnames(dat_nor)[3:ncol(dat_nor)])
row.names(sample_anno) <- sample_anno$condition
sample_anno$condition=gsub("_[0-9]*$","",sample_anno$condition)
sample_anno$condition=gsub("[0-9][0-9]*P$","Plasma",sample_anno$condition)
sample_anno$condition=gsub("[0-9]*C$","CSF",sample_anno$condition)
sample_anno$condition=gsub("iNeuron_D28.*","iNeuron_D28",sample_anno$condition)
sample_anno$condition=factor(sample_anno$condition, levels = c("Brain_C9FTLD_TDP","Brain_Control","iMicroglia_D45","Astrocyte","iNeuron_D28","Muscle_IBM","Muscle_IBM_CTRL","CSF" ,"Plasma"    ))
annoCol<-list(condition=c(Brain_C9FTLD_TDP ="#8dd3c7", Brain_Control="#ffffb3",
iMicroglia_D45="#bebada", Astrocyte="#fb8072",
iNeuron_D28='#80b1d3',
Muscle_IBM='#b3de69',Muscle_IBM_CTRL='#fccde5',
CSF='#d9d9d9',Plasma='#bc80bd'))
p=pheatmap(log2(na.omit(dat[,3:ncol(dat_nor)])+1),
scale='none',
show_rownames = F,
annotation_col = sample_anno,
annotation_colors = annoCol,
clustering_distance_cols = 'correlation')
p=pheatmap(log2(na.omit(dat[,3:ncol(dat_nor)])+1),
scale='none',
show_rownames = F,
cluster_cols = F,
annotation_col = sample_anno,
annotation_colors = annoCol,
clustering_distance_cols = 'correlation')
